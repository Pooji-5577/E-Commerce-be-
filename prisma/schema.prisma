// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  phone     String?
  address   String?
  city      String?
  state     String?
  pincode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    Order[]
  cart      CartItem[]
  reviews   Review[]
  wishlist  WishlistItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  parentId    String?
  gender      Gender?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@index([parentId])
  @@index([gender])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Decimal
  discountPrice Decimal?
  stock       Int         @default(0)
  imageUrl    String?
  images      String?     // Comma-separated URLs
  categoryId  String
  brand       String?
  color       String?
  size        String?     // Comma-separated sizes
  material    String?
  gender      Gender?
  isActive    Boolean     @default(true)
  isFeatured  Boolean     @default(false)
  tags        String?     // Comma-separated tags
  sellerId    String?
  seller      User?       @relation(fields: [sellerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  wishlistItems WishlistItem[]
  variants    ProductVariant[]
  
  @@index([categoryId])
  @@index([gender])
  @@index([brand])
  @@index([isFeatured])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  size      String
  color     String
  stock     Int     @default(0)
  priceAdjustment Decimal @default(0)
  imageUrl  String?
  
  // Relations
  product   Product @relation(fields: [productId], references: [id])
  
  @@unique([productId, size, color])
  @@index([productId])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  total       Decimal
  discount    Decimal     @default(0)
  shipping    Decimal     @default(0)
  shippingAddress String?
  phone       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  
  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  size      String?
  color     String?
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId, size, color])
  @@index([userId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@index([productId])
}

enum Role {
  CUSTOMER
  ADMIN
  SELLER
}

enum Gender {
  MEN
  WOMEN
  KIDS
  UNISEX
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}
